name: Deploy happywork-cms to Cloudflare Pages

on:
  workflow_call:
    inputs:
      artifact-name:
        required: true
        type: string
      branch:
        required: true
        type: string
      cloudflare-page-name:
        required: true
        type: string
      aws-account-id:
        required: true
        type: string

jobs:
  execute-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: DOWNLOAD BUILD OUTPUT
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: out

      - name: GET CLOUDFLARED API TOKEN
        run: echo "input branch=${{ inputs.branch }} input cloudflare-page-name=${{ inputs.cloudflare-page-name }} input artifact-name=${{ inputs.artifact-name }}"

      - name: CONFIGURE AWS CREDENTIALS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ inputs.aws-account-id }}:role/github-action-frontend
          aws-region: ap-southeast-7

      - name: Get CLOUDFLARE API TOKEN
        id: get-cloudflare-secret
        run: |
          SECRETS=$(aws secretsmanager get-secret-value --secret-id arn:aws:secretsmanager:ap-southeast-7:${{ inputs.aws-account-id }}:secret:cloudflare-credentials --query SecretString --output text --region ap-southeast-7)
          CLOUDFLARE_API_TOKEN=$(echo $SECRETS | jq .CLOUDFLARE_API_TOKEN | tr -d '"')
          CLOUDFLARE_ACCOUNT_ID=$(echo $SECRETS | jq .CLOUDFLARE_ACCOUNT_ID | tr -d '"')
          echo "::add-mask::$CLOUDFLARE_API_TOKEN"
          echo "::add-mask::$CLOUDFLARE_ACCOUNT_ID"
          echo "api-token=$CLOUDFLARE_API_TOKEN" >> $GITHUB_OUTPUT
          echo "account-id=$CLOUDFLARE_ACCOUNT_ID" >> $GITHUB_OUTPUT

      - name: CLOUDFLARE API TOKEN
        run: |
          echo "CLOUDFLARE_API_TOKEN=${{ steps.get-cloudflare-secret.outputs.api-token }}"

      - name: CLOUDFLARE ACCOUNT ID
        run: |
          echo "CLOUDFLARE_ACCOUNT_ID=${{ steps.get-cloudflare-secret.outputs.account-id }}"

      - name: DEPLOY TO CLOUDFLARE PAGES
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ steps.get-cloudflare-secret.outputs.api-token }}
          accountId: ${{ steps.get-cloudflare-secret.outputs.account-id }}
          command: pages deploy --project-name=${{ inputs.cloudflare-page-name }} --branch ${{ inputs.branch }} ./out
